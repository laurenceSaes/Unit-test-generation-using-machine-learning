Wed May 16 00:56:16 UTC 2018 WARN: Establishing SSL connection without server's identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn't set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to 'false'. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.
Wed May 16 00:56:39 UTC 2018: Cannot parse: Lexical error at line 1, column 1.  Encountered: "#" (35), after : ""
Problem stacktrace : 
  com.github.javaparser.GeneratedJavaParserTokenManager.getNextToken(GeneratedJavaParserTokenManager.java:2798)
  com.github.javaparser.GeneratedJavaParser.jj_scan_token(GeneratedJavaParser.java:10140)
  com.github.javaparser.GeneratedJavaParser.jj_3_1(GeneratedJavaParser.java:6803)
  com.github.javaparser.GeneratedJavaParser.jj_2_1(GeneratedJavaParser.java:5656)
  com.github.javaparser.GeneratedJavaParser.CompilationUnit(GeneratedJavaParser.java:81)
  com.github.javaparser.JavaParser.parse(JavaParser.java:126)
  com.github.javaparser.JavaParser.simplifiedParse(JavaParser.java:325)
  com.github.javaparser.JavaParser.parse(JavaParser.java:159)
  com.github.javaparser.JavaParser.parse(JavaParser.java:172)
  parser.JavaSourceMapper.getCompilationUnit(JavaSourceMapper.java:76)
  parser.JavaSourceMapper.addJavaFile(JavaSourceMapper.java:44)
  java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
  java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
  java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
  java.util.Iterator.forEachRemaining(Iterator.java:116)
  java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
  java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
  java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
  java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
  java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
  java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
  java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
  parser.JavaSourceMapper.<init>(JavaSourceMapper.java:39)
  cache.ParserCache.getParser(ParserCache.java:24)
  application.LinkBasedOnQueue.processTest(LinkBasedOnQueue.java:180)
  application.LinkBasedOnQueue.main(LinkBasedOnQueue.java:107)

Exception in thread "main" java.lang.OutOfMemoryError: GC overhead limit exceeded
	at java.lang.AbstractStringBuilder.<init>(AbstractStringBuilder.java:68)
	at java.lang.StringBuffer.<init>(StringBuffer.java:116)
	at java.util.regex.Matcher.replaceAll(Matcher.java:953)
	at java.lang.String.replace(String.java:2240)
	at slicer.AnalyzeUtils.getJavaClassName(AnalyzeUtils.java:161)
	at slicer.AnalyzeUtils.findClass(AnalyzeUtils.java:31)
	at slicer.AnalyzeUtils.getTestMethods(AnalyzeUtils.java:44)
	at linker.methods.BytecodeAnalysisWithLargestMatchingClass.makeCallOverview(BytecodeAnalysisWithLargestMatchingClass.java:62)
	at linker.UnitTestLinker.linkBasedOnMostMatch(UnitTestLinker.java:126)
	at linker.methods.BytecodeAnalysisWithLargestMatchingClass.linkToAllMethods(BytecodeAnalysisWithLargestMatchingClass.java:55)
	at linker.TestToMethodLinker.linkTestCaseCashedLinker(TestToMethodLinker.java:38)
	at application.LinkBasedOnQueue.processTest(LinkBasedOnQueue.java:195)
	at application.LinkBasedOnQueue.main(LinkBasedOnQueue.java:107)
